// Really small components

// Using arbitrary typefaces
.type-gotham-light    {font-family: $heading-typeface-light !important; }
.type-gotham-medium   {font-family: $heading-typeface-medium !important; }
.type-gotham-bold     {font-family: $heading-typeface-bold !important; }

.type-source-light    {font-family: $body-typeface !important; }
.type-source-regular  {font-family: $body-typeface-regular !important; }
.type-source-semibold {font-family: $body-typeface-semibold !important; }
.type-source-bold     {font-family: $body-typeface-bold !important; }

// This adds borders between bootstrap columns
.border-between {
    & > [class*='col-']:before, & > [class*='col-']:after {
        // The design specifies #979797, but for consistancy...
        background: $colour-grey;
        bottom: 0;
        content: "";
        position: absolute;
        top: 0;
        width: 1px;
    }
    & > [class*='col-']:before {
        left: -1px;
    }
    & > [class*='col-']:after {
        right: 0;
    }
    & > [class*='col-']:first-child:before,
    & > [class*='col-']:last-child:after {
        display: none;
    }
}

// Standard 
.cta-box {
  // If this is used inside a grid with other .cta-boxes, they'll all be the same size.
  height: calc(100% - #{$gutter});
  display: flex;
  flex-direction: column;  
  margin-bottom: $gutter;
  padding: $gutter;
  
  // The flex rules above can play merry-hell if the .cta-box is just hanging out at the
  // end of a long article.
  &.orphan {
    height: auto;
  }
  
  // For the final block element inside the .cta-box
  // (not the last .cta-box inside a container)
  & > :last-child {
    margin-top: auto;
    margin-bottom: 0;

    // Hmmm.
    & .btn { margin-bottom: 0; }
  }
}
@media print {
  .cta-box {
    padding: 0;
  }
}

@include media-breakpoint-down(md) {
  .cta-box {
    padding: $gutter / 2;
  }
}

.radius-big    { border-radius: $radius-big; }
.radius-medium { border-radius: $radius-medium; }
.radius-small  { border-radius: $radius-small; }
.round         { border-radius: 50%; }

// This is used to add a stroke around .icon-disk elements but, I dunno, it might be useful
// elsewhere.
.border-thin { border: solid 1px $colour-dark-blue; }

// Colouring borders in arbratory colours
.border-bright-blue { border-color: $colour-bright-blue !important; }
.border-mid-blue    { border-color: $colour-mid-blue !important; }
.border-dark-blue   { border-color: $colour-dark-blue !important; }
.border-red         { border-color: $colour-red !important; }
.border-green       { border-color: $colour-green !important; }
.border-grey        { border-color: $colour-grey !important; }
.border-dark-grey   { border-color: $colour-dark-grey !important; }
.border-white       { border-color: $colour-white !important; }
.border-off-white   { border-color: $colour-off-white !important; }
.border-mint        { border-color: $colour-mint !important; }
.border-lemon       { border-color: $colour-lemon !important; }
.border-light-grey  { border-color: $colour-light-grey !important; }

.img-fluid { max-width: 100%; }
// Used in conjunction with the above classes, this makes a shape a bit
// like an upside-down U. You know, â‹‚.
.cap-top {
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
}

// Used on product displays
.shadow-light {
  -webkit-box-shadow: 0 .2em .5em 0 rgba(0,0,0,.1);
     -moz-box-shadow: 0 .2em .5em 0 rgba(0,0,0,.1);
          box-shadow: 0 .2em .5em 0 rgba(0,0,0,.1);
}

.flush { margin-bottom: 0 !important; }

// Adding horizontal gutters between molecules
.gutter-small  { margin-bottom: $space !important; }
.gutter-medium { margin-bottom: $space * 2 !important; }
.gutter-large  { margin-bottom: $space * 4 !important; }

@include media-breakpoint-down(sm) {
  .gutter-small  { margin-bottom: $space / 4 !important; }
  .gutter-medium { margin-bottom: $space / 2 !important; }
  .gutter-large  { margin-bottom: $space !important; }
}

// This is used to make round images sit uncomfortably close to each other
.overlap-small { margin-top: -$space !important; }

// Used to add spacing above the language bar, but might be useful elsewhere
.pt-small { padding-top: $gutter / 2;}
.pt       { padding-top: $gutter;}
.pt-large { padding-top: $gutter * 2;}

.bdr-bottom { border-bottom: solid 1px $colour-light-grey; }

// Colouring text in arbratory colours
.txt-bright-blue { color: $colour-bright-blue; }
.txt-mid-blue    { color: $colour-mid-blue; }
.txt-dark-blue   { color: $colour-dark-blue; }
.txt-red         { color: $colour-red; }
.txt-green       { color: $colour-green; }
.txt-grey        { color: $colour-grey; }
.txt-dark-grey   { color: $colour-dark-grey; }
.txt-white       { color: $colour-white; }
.txt-off-white   { color: $colour-off-white; }
.txt-mint        { color: $colour-mint; }
.txt-lemon       { color: $colour-lemon; }
.txt-light-grey  { color: $colour-light-grey; }

.text-left      { text-align: left; }
.text-center    { text-align: center; }
.text-right     { text-align: right; }
.text-uppercase { text-transform: uppercase; }
.text-breath    { letter-spacing: .08em; }
.text-nowrap    { white-space: nowrap; }
// This class allows buttons to be put together closer than they usually would,
// for example in a toolbar.
.toolbar .btn { margin-right: 9px; }

// Gives an image a gradient border and makes it a circle
.img-profile {
  background: $grad-light-blue;
  display: inline-block;
  padding: 1px;

  &, img {
    border-radius: 50%;
  }
}

// Say you have a set of icons or buttons and you want to make a quick-and-dirty navbar
.space-between {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
}

// Say you have a CTA inside a Bootstrap column and you need it to have a vertical flexbox
// layout, so you can push the button to the bottom (using a .mt-auto class, for example)
// Works on elements which already have the whole height of the row, naturally.
.flex-vert {
  display: flex;
  flex-direction: column;
  // Risky...
  height: 100%;
}

// The height property above causes issues when .flex-vert was added directly onto a Bootstrap
// column.
.flex-vert[class^='col'], .flex-vert[class*=' col'] {
  height: auto;
}

// Sometimes required to snap columns into two (or more) rows
.w-100 { width: 100% !important; }

.sr-only, .js.js [data-js="hidden"] {
  border: 0;
  clip: rect(0,0,0,0);
  height: 1px;
  margin: -1px;
  min-width: 0;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}
// Like the above, but EVIL
.hidden { display: none; }

// Not delighted with this pattern but was used to get the tooltips to behave
// outside of the grid on mobile
.pos-rel { position: relative; }

// For debug purposes
.input-radio {
  -webkit-appearance: radio;
     -moz-appearance: radio;
      -ms-appearance: radio;
       -o-appearance: radio;
          appearance: radio;
}

// This is a small highlight used for wrapping around logos, to keep them in line
.logo-block {
  display: inline-block;
  padding: 0 .2em .2em;

  // The SVGs might go inline at some point...
  img {
    height: 13px; // IE again
    width: 40px;
  }
}

// Used in the third-party quotes. Perhaps there's a more reusable pattern we could use.
.quote-logo {
  height: 50px;
  width: 180px;
}