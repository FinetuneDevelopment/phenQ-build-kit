// HTML forms

// By default, input elements are wee (see currency chooser, top of page)
input, select, textarea {
  -webkit-appearance: none;
     -moz-appearance: none;
      -ms-appearance: none;
       -o-appearance: none;
          appearance: none;
  box-shadow: none;
  background: $colour-off-white;
  border: solid 1px $colour-grey;
  border-radius: $radius-small;
  color: $colour-grey;
}

// Tricking select boxes into looking normal
select {
  background: $colour-off-white url(/img/bg/select-default.svg) right 10px top 50% no-repeat;
  padding-right: 20px;

  &:focus {background: $colour-off-white url(/img/bg/select-focus.svg) right 10px top 50% no-repeat;}
}

// Sometimes not much data needs to be collected
.input-sm { width: 4em; }

// This is the container class for the standard inputs,
// which require some trickiness. Assumed markup pattern:
// <p class="form-molecule">
//   <input>
//   <label>
// </p>
.form-molecule {
  position: relative;

  input, select, textarea {
    display: block;
    font-size: 15px;
    max-width: 100%;
    min-height: 43px;
    padding: 15px 10px 5px;
    width: 100%;

    // The appearance of the input element when there is no
    // data and the placeholder text is showing
    &:placeholder-shown {
      border-color: $colour-light-grey;
      color: transparent;
      padding: 10px;

      & ~ label {
        font-size: 15px;
        line-height: 33px;
      }
    }

    // User is typing
    &:focus, &:hover {
      border-color: $colour-dark-blue;
    }

    // User has made a TERRIBLE MISTAKE
    &:invalid, &.error {
      border-color: $colour-red;
      color: $colour-red;

      & ~ label {
        color: $colour-red;
      }
    & ~ .message {
        color: $colour-red;
        display: block;
      }
    }

    // User has given Dobbie DATA
    // I can't use :valid here as it would match all inputs
    // on the page which weren't explicitly wrong.
    &.valid {
      border-color: $colour-green;
      color: $colour-green;

      & ~ label {color: $colour-green;}
    }
  }

  // Replicating the error styles when the class is used on a
  // parent element instead of directly on the input itself.
  &.error {
    input, select, textarea {
      border-color: $colour-red;
      color: $colour-red;

      &:placeholder-shown { color: transparent; }

      & ~ label { color: $colour-red; }
    }
  }

  // Select boxes within .form-molecule have slightly more space
  select, select:focus {
    background-position: right 20px top 50%;
    padding-right: 30px;
  }

  // This needs to sit inside the input element
  label {
    font-size: 10px;
    left: 10px;
    position: absolute;
    top: 5px;
    transition: all .5s;
  }

  // This can hold tips, errors, encouragement. It's hidden by default.
  .message {
    display: none; // Because we want to hide it from speech readers too
    font-family: $body-typeface-bold;
    font-size: 10px;
    margin: 5px 0;
  }

  // Checkboxes and radio buttons
  [type="checkbox"], [type="radio"] {
    border: 0;
    clip: rect(0,0,0,0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
    & ~ label {
      font-size: 18px;
      left: 0;
      position: relative;
      top: 0;
      &::before, &::after {
          content: "";
      }
      // Frame for the inputs
      &::before {
        border: solid .2em $colour-dark-blue;
        display: inline-block;
        height: 1em;
        margin: 0 .5em 0 0;
        vertical-align: middle;
        width: 1em;
      }
      // "On" status
      &::after {
        position: absolute;
        transition: all .2s;
      }
    }
  }

  [type="checkbox"] ~ label::after {
    border: solid .2em transparent;
    left: .25em;
    height: .8em;
    top: .15em;
    transform: rotate(0deg);
    width: .5em;
  }

  // Selected state
  [type="checkbox"]:checked ~ label::after {
    border-bottom-color: $colour-bright-blue;
    border-right-color: $colour-bright-blue;
    transform: rotate(45deg);
  }

  [type="radio"] ~ label {
    &::before {border-radius: 50%;}

    &::after {
      background: $colour-bright-blue;
      border-radius: 50%;
      height: .4em;
      left: .3em;
      opacity: 0;
      position: absolute;
      top: 44%;
      width: .4em;
    }
  }

  // Selected state
  [type="radio"]:checked ~ label::after {
    opacity: 1;
  }
}

// Used for the checkout to make radio buttons ... more chunky
// Sorry for the horrible selector. Got in an inheritance fight.
.label-block.label-block.label-block {
  $block-padding: 10px;

  display: block;
  padding: $block-padding;

  // Normally, the ::before of the checkbox is inline with the label.
  // In this context, it's not, so I can stuff an entire Bootstrap
  // row inside.
  &::before {
    left: $block-padding;
    position: absolute;
    top: 13px;
  }

  &::after {
    left: calc(#{$block-padding} + .3em);
  }
}

// The border colour is initiall added as a utility class, so needs
// an !important.
.form-molecule input:checked ~ .label-block {
  border-color: $colour-dark-blue !important;
}

// Radio button position tweak
.form-molecule input[type="radio"] ~ .label-block:after {
  top: 18px
}

// Checkbox position tweak
.form-molecule input[type="checkbox"] ~ .label-block:after {
  top: 12px
}


// More compact forms can be found elsewhere - for example the email signup
// in the site footer.
.form-compact {
  border-bottom: solid 1px $colour-dark-blue;
  position: relative;

  input, select, textarea {
    background-color: transparent;
    border: none;
    display: block;
    padding: 9px 0;
    width: 100%;
  }

  @include media-breakpoint-down(sm) {
    // Used for the currency selector, at the top of the page.
    .input-sm { padding: 0; }
  }

  label {
    font-size: 10px;
    line-height: 1;
    left: 0;
    position: absolute;
    top: 0;
    transition: all .5s;
  }

  :placeholder-shown {
    color: transparent;

    & ~ label {
      font-size: inherit;
      line-height: 43px;
    }
  }
}

// Used in the header of the page
.form-compact-nobrd {
  border: 0;
}

.form-compact__submit {
  min-height: 43px;
  padding: 0 0 0 34px;
}